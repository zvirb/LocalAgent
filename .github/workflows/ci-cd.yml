name: LocalAgent CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  quality-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        # Install UnifiedWorkflow dependencies if present
        if [ -f "UnifiedWorkflow/requirements-core.txt" ]; then
          pip install -r UnifiedWorkflow/requirements-core.txt
        fi
        if [ -f "UnifiedWorkflow/requirements-web.txt" ]; then
          pip install -r UnifiedWorkflow/requirements-web.txt
        fi
        # Install development dependencies
        pip install \
          pytest>=7.0.0 \
          pytest-asyncio>=0.21.0 \
          pytest-cov>=4.0.0 \
          pytest-mock>=3.10.0 \
          black>=23.0.0 \
          isort>=5.12.0 \
          pylint>=3.0.0 \
          flake8>=6.0.0 \
          mypy>=1.0.0 \
          bandit>=1.7.0 \
          safety>=2.3.0
    
    - name: Code formatting check
      run: |
        black --check app/ scripts/ tests/
        isort --check-only app/ scripts/ tests/
    
    - name: Linting
      run: |
        pylint app/ || true
        flake8 app/ scripts/ tests/
    
    - name: Type checking
      run: |
        mypy app/ || true
    
    - name: Security check
      run: |
        bandit -r app/ || true
        safety check || true
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
      env:
        PYTEST_TIMEOUT: 120
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Integration Testing
  integration-tests:
    runs-on: ubuntu-latest
    needs: quality-check
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.com/install.sh | sh
        # Start Ollama in background
        ollama serve &
        sleep 10
        # Pull a small test model
        ollama pull llama3.2:1b || echo "Model pull failed, continuing..."
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f "UnifiedWorkflow/requirements-core.txt" ]; then
          pip install -r UnifiedWorkflow/requirements-core.txt
        fi
        pip install pytest pytest-asyncio httpx responses
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --timeout=300
      env:
        OLLAMA_BASE_URL: http://localhost:11434
        REDIS_URL: redis://localhost:6379/0
        TEST_TIMEOUT: 300

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [quality-check, integration-tests]
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          BUILD_REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  # Container Security Scan
  container-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.docker-build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, container-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.localagent.dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl, docker-compose, or cloud provider CLI
        
        # For demonstration, showing Docker Compose deployment
        echo "IMAGE_TAG=${{ needs.docker-build.outputs.image-tag }}" > .env
        docker-compose -f docker-compose.staging.yml up -d
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        sleep 30  # Wait for services to start
        
        # Test health endpoints
        curl -f http://staging.localagent.dev/health || exit 1
        
        # Test CLI functionality
        docker run --rm ${{ needs.docker-build.outputs.image-tag }} providers || exit 1

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, container-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://localagent.dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
        # Blue-green deployment example
        echo "IMAGE_TAG=${{ needs.docker-build.outputs.image-tag }}" > .env
        
        # Deploy to blue environment
        docker-compose -f docker-compose.blue.yml up -d
        
        # Health check
        sleep 60
        curl -f http://blue.localagent.dev/health || exit 1
        
        # Switch traffic (would be handled by load balancer)
        echo "Traffic switching would happen here"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          
          ### üöÄ Features
          - Multi-provider LLM support (Ollama, OpenAI, Gemini, Perplexity)
          - UnifiedWorkflow orchestration integration
          - Secure API key management
          - Docker containerization
          - Comprehensive monitoring
          
          ### üêõ Bug Fixes
          - Various stability improvements
          
          ### üì¶ Container Images
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
          
          ### üîß Installation
          ```bash
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install.sh | bash
          ```
          
          ### üê≥ Docker
          ```bash
          docker run -it ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
        draft: false
        prerelease: false

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          LocalAgent deployment completed!
          
          Status: ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          
          Image: ${{ needs.docker-build.outputs.image-tag }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}