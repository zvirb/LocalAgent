# LocalAgent CLI Autocomplete - Docker Makefile
# Usage: make -f Makefile.autocomplete [target]

.PHONY: help build run test clean logs shell push pull

# Variables
IMAGE_NAME := localagent
IMAGE_TAG := cli-autocomplete
CONTAINER_NAME := localagent-cli-autocomplete
COMPOSE_FILE := docker-compose.cli-autocomplete.yml
DOCKER_REGISTRY := ${DOCKER_REGISTRY}

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
NC := \033[0m # No Color

help: ## Show this help message
	@echo "$(GREEN)LocalAgent CLI Autocomplete - Docker Commands$(NC)"
	@echo "=============================================="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'

build: ## Build the Docker image with autocomplete
	@echo "$(GREEN)Building LocalAgent CLI with Autocomplete...$(NC)"
	docker build -f docker/Dockerfile.cli-autocomplete -t $(IMAGE_NAME):$(IMAGE_TAG) .
	@echo "$(GREEN)✓ Build complete$(NC)"

build-nocache: ## Build without using cache
	@echo "$(GREEN)Building without cache...$(NC)"
	docker build --no-cache -f docker/Dockerfile.cli-autocomplete -t $(IMAGE_NAME):$(IMAGE_TAG) .

run: ## Run the CLI with autocomplete in Docker
	@echo "$(GREEN)Starting LocalAgent CLI with Autocomplete...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)✓ Services started$(NC)"
	@echo "$(YELLOW)Attaching to CLI...$(NC)"
	docker attach $(CONTAINER_NAME)

run-interactive: ## Run interactive CLI session
	@echo "$(GREEN)Starting interactive session...$(NC)"
	docker run -it --rm \
		--name $(CONTAINER_NAME)-interactive \
		-v localagent-autocomplete:/home/localagent/.localagent \
		-e TERM=xterm-256color \
		--network localagent-network \
		$(IMAGE_NAME):$(IMAGE_TAG)

test: ## Run autocomplete tests in Docker
	@echo "$(GREEN)Running autocomplete tests...$(NC)"
	docker run --rm \
		-v $(PWD)/tests:/app/tests:ro \
		$(IMAGE_NAME):$(IMAGE_TAG) \
		pytest /app/tests/cli/test_autocomplete.py -v

test-interactive: ## Test autocomplete interactively
	@echo "$(GREEN)Testing autocomplete interactively...$(NC)"
	docker run -it --rm \
		--entrypoint /bin/bash \
		$(IMAGE_NAME):$(IMAGE_TAG) \
		-c "python -c 'from app.cli.ui.autocomplete_prompt import create_autocomplete_prompt; from rich.console import Console; p = create_autocomplete_prompt(Console()); result = p.prompt(); print(f\"You entered: {result}\")'"

logs: ## Show container logs
	@echo "$(GREEN)Showing logs...$(NC)"
	docker-compose -f $(COMPOSE_FILE) logs -f localagent-cli-autocomplete

shell: ## Open shell in running container
	@echo "$(GREEN)Opening shell...$(NC)"
	docker exec -it $(CONTAINER_NAME) /bin/bash

shell-new: ## Open shell in new container
	@echo "$(GREEN)Opening shell in new container...$(NC)"
	docker run -it --rm \
		--entrypoint /bin/bash \
		-v localagent-autocomplete:/home/localagent/.localagent \
		$(IMAGE_NAME):$(IMAGE_TAG)

stop: ## Stop all services
	@echo "$(YELLOW)Stopping services...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)✓ Services stopped$(NC)"

clean: ## Clean up containers and volumes
	@echo "$(RED)Cleaning up...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down -v
	docker rmi $(IMAGE_NAME):$(IMAGE_TAG) || true
	@echo "$(GREEN)✓ Cleanup complete$(NC)"

clean-history: ## Clear autocomplete history
	@echo "$(YELLOW)Clearing autocomplete history...$(NC)"
	docker exec $(CONTAINER_NAME) rm -f /home/localagent/.localagent/autocomplete_history.* || true
	@echo "$(GREEN)✓ History cleared$(NC)"

backup-history: ## Backup autocomplete history
	@echo "$(GREEN)Backing up autocomplete history...$(NC)"
	@mkdir -p backups
	docker cp $(CONTAINER_NAME):/home/localagent/.localagent/autocomplete_history.json ./backups/autocomplete_history_$$(date +%Y%m%d_%H%M%S).json || true
	docker cp $(CONTAINER_NAME):/home/localagent/.localagent/autocomplete_history.enc ./backups/autocomplete_history_$$(date +%Y%m%d_%H%M%S).enc || true
	@echo "$(GREEN)✓ Backup complete$(NC)"

restore-history: ## Restore autocomplete history from backup
	@echo "$(GREEN)Restoring autocomplete history...$(NC)"
	@read -p "Enter backup file path: " backup_file; \
	docker cp $$backup_file $(CONTAINER_NAME):/home/localagent/.localagent/
	@echo "$(GREEN)✓ History restored$(NC)"

stats: ## Show autocomplete statistics
	@echo "$(GREEN)Autocomplete Statistics:$(NC)"
	@docker exec $(CONTAINER_NAME) python -c "\
		from app.cli.intelligence.autocomplete_history import AutocompleteHistoryManager; \
		m = AutocompleteHistoryManager(); \
		stats = m.get_statistics(); \
		print(f\"Total Commands: {stats['total_commands']}\"); \
		print(f\"Unique Commands: {stats['unique_commands']}\"); \
		print(f\"Success Rate: {stats['average_success_rate']:.1%}\"); \
		print(f\"Session Commands: {stats['session_commands']}\"); \
		print(f\"History Size: {stats.get('history_size_bytes', 0) / 1024:.1f} KB\"); \
		print('\nMost Used Commands:'); \
		for cmd, count in stats['most_used_commands'][:5]: \
		    print(f'  {count:3d} - {cmd}')" || echo "No statistics available"

push: ## Push image to registry
	@echo "$(GREEN)Pushing image to registry...$(NC)"
	docker tag $(IMAGE_NAME):$(IMAGE_TAG) $(DOCKER_REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG)
	docker push $(DOCKER_REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG)
	@echo "$(GREEN)✓ Image pushed$(NC)"

pull: ## Pull image from registry
	@echo "$(GREEN)Pulling image from registry...$(NC)"
	docker pull $(DOCKER_REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG)
	docker tag $(DOCKER_REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG) $(IMAGE_NAME):$(IMAGE_TAG)
	@echo "$(GREEN)✓ Image pulled$(NC)"

demo: ## Run autocomplete demo
	@echo "$(GREEN)Running Autocomplete Demo...$(NC)"
	@echo "$(YELLOW)This will demonstrate the autocomplete features$(NC)"
	@docker run -it --rm \
		-e DEMO_MODE=true \
		$(IMAGE_NAME):$(IMAGE_TAG) \
		python -m app.cli.ui.autocomplete_demo

monitor: ## Monitor autocomplete performance
	@echo "$(GREEN)Monitoring Autocomplete Performance...$(NC)"
	@docker exec $(CONTAINER_NAME) python -c "\
		import time; \
		from app.cli.intelligence.autocomplete_history import AutocompleteHistoryManager; \
		m = AutocompleteHistoryManager(); \
		print('Testing autocomplete performance...'); \
		for prefix in ['git', 'docker', 'npm', 'test']: \
		    start = time.time(); \
		    suggestions = m.get_suggestions(prefix); \
		    elapsed = (time.time() - start) * 1000; \
		    print(f'{prefix:10s}: {elapsed:6.2f}ms - {len(suggestions)} suggestions'); \
		print(f'\nTarget: < 16ms (60 FPS)')"

# Development targets
dev-build: ## Build for development with source mounting
	@echo "$(GREEN)Building development image...$(NC)"
	docker build -f docker/Dockerfile.cli-autocomplete \
		--target builder \
		-t $(IMAGE_NAME):$(IMAGE_TAG)-dev .

dev-run: ## Run with source code mounted for development
	@echo "$(GREEN)Starting development container...$(NC)"
	docker run -it --rm \
		-v $(PWD)/app:/app/app:ro \
		-v $(PWD)/scripts:/app/scripts:ro \
		-v $(PWD)/tests:/app/tests:ro \
		-v localagent-autocomplete-dev:/home/localagent/.localagent \
		-e DEVELOPMENT_MODE=true \
		--name $(CONTAINER_NAME)-dev \
		$(IMAGE_NAME):$(IMAGE_TAG)

.DEFAULT_GOAL := help